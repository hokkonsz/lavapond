/// Color uses sRGB color space
///
/// https://en.wikipedia.org/wiki/SRGB
#[derive(Debug, Clone, Copy, Default)]
pub struct Color(glam::Vec3);

impl Color {
    pub const BLACK: Self = Self(glam::Vec3::ZERO);
    pub const MIDNIGHT: Self = Self::from_u8(33, 33, 42);
    pub const RAISIN: Self = Self::from_u8(45, 45, 54);
    pub const ONYX: Self = Self::from_u8(57, 57, 66);
    pub const GRAY: Self = Self::from_u8(80, 80, 89);
    pub const EMERALD: Self = Self::from_u8(24, 216, 130);
    pub const GREEN: Self = Self::from_u8(52, 159, 57);
    pub const MINT: Self = Self::from_u8(17, 176, 129);
    pub const CERULEAN: Self = Self::from_u8(17, 108, 140);
    pub const BLUE: Self = Self::from_u8(45, 84, 177);
    pub const ROYAL_BLUE: Self = Self::from_u8(77, 105, 226);
    pub const MAGENTA: Self = Self::from_u8(207, 20, 113);
    pub const RED: Self = Self::from_u8(235, 40, 69);
    pub const ORANGE: Self = Self::from_u8(219, 142, 46);
    pub const GOLD: Self = Self::from_u8(235, 188, 64);
    pub const YELLOW: Self = Self::from_u8(255, 216, 101);
    pub const ALMOND: Self = Self::from_u8(235, 219, 200);
    pub const PEAR: Self = Self::from_u8(208, 234, 39);
    pub const TEA: Self = Self::from_u8(208, 234, 185);
    pub const LAVENDER: Self = Self::from_u8(217, 222, 235);
    pub const PLATINUM: Self = Self::from_u8(220, 220, 220);
    pub const WHITE: Self = Self(glam::Vec3::ONE);

    /// Inputs are sRGB (non-linear), no mapping
    pub const fn from_f32(r: f32, g: f32, b: f32) -> Self {
        Self(glam::Vec3::new(r, g, b))
    }

    /// Inputs are RGB (linear), which is then mapped to sRGB (non-linear)
    pub const fn from_u8(r: u8, g: u8, b: u8) -> Self {
        Self(glam::Vec3::new(
            Color::SRGB_MAP[r as usize],
            Color::SRGB_MAP[g as usize],
            Color::SRGB_MAP[b as usize],
        ))
    }

    /// Returns the red value
    pub fn r(&self) -> f32 {
        self.0.x
    }

    /// Returns the green value
    pub fn g(&self) -> f32 {
        self.0.y
    }

    /// Returns the blue value
    pub fn b(&self) -> f32 {
        self.0.z
    }

    /// Returns a random sRGB color
    pub fn random() -> Self {
        Self(glam::vec3(
            Color::SRGB_MAP[rand::random_range(0..255)],
            Color::SRGB_MAP[rand::random_range(0..255)],
            Color::SRGB_MAP[rand::random_range(0..255)],
        ))
    }

    /// https://en.wikipedia.org/wiki/SRGB#Definition
    ///
    /// RGB (linear) map to sRGB (non-linear)
    ///
    /// To be able to use const in from_u8 function.
    /// We pre calculate the values otherwise as stated in the definition of SRGB,
    /// to transform we have to use powf function which is not const.
    const SRGB_MAP: [f32; 256] = [
        0.000000000,
        0.000303527,
        0.000607054,
        0.000910581,
        0.001214108,
        0.001517635,
        0.001821162,
        0.002124689,
        0.002428216,
        0.002731743,
        0.003035270,
        0.003346536,
        0.003676507,
        0.004024717,
        0.004391442,
        0.004776953,
        0.005181517,
        0.005605392,
        0.006048833,
        0.006512091,
        0.006995410,
        0.007499032,
        0.008023193,
        0.008568126,
        0.009134059,
        0.009721217,
        0.010329823,
        0.010960094,
        0.011612245,
        0.012286488,
        0.012983032,
        0.013702083,
        0.014443844,
        0.015208514,
        0.015996293,
        0.016807376,
        0.017641954,
        0.018500220,
        0.019382361,
        0.020288563,
        0.021219010,
        0.022173885,
        0.023153366,
        0.024157632,
        0.025186860,
        0.026241222,
        0.027320892,
        0.028426040,
        0.029556834,
        0.030713444,
        0.031896033,
        0.033104767,
        0.034339807,
        0.035601315,
        0.036889450,
        0.038204372,
        0.039546235,
        0.040915197,
        0.042311411,
        0.043735029,
        0.045186204,
        0.046665086,
        0.048171824,
        0.049706566,
        0.051269458,
        0.052860647,
        0.054480276,
        0.056128490,
        0.057805430,
        0.059511238,
        0.061246054,
        0.063010018,
        0.064803267,
        0.066625939,
        0.068478170,
        0.070360096,
        0.072271851,
        0.074213568,
        0.076185381,
        0.078187422,
        0.080219820,
        0.082282707,
        0.084376212,
        0.086500462,
        0.088655586,
        0.090841711,
        0.093058963,
        0.095307467,
        0.097587347,
        0.099898728,
        0.102241733,
        0.104616484,
        0.107023103,
        0.109461711,
        0.111932428,
        0.114435374,
        0.116970668,
        0.119538428,
        0.122138772,
        0.124771818,
        0.127437680,
        0.130136477,
        0.132868322,
        0.135633330,
        0.138431615,
        0.141263291,
        0.144128471,
        0.147027266,
        0.149959790,
        0.152926152,
        0.155926464,
        0.158960835,
        0.162029376,
        0.165132195,
        0.168269400,
        0.171441101,
        0.174647404,
        0.177888416,
        0.181164244,
        0.184474995,
        0.187820772,
        0.191201683,
        0.194617830,
        0.198069320,
        0.201556254,
        0.205078736,
        0.208636870,
        0.212230757,
        0.215860500,
        0.219526200,
        0.223227957,
        0.226965874,
        0.230740049,
        0.234550582,
        0.238397574,
        0.242281122,
        0.246201327,
        0.250158285,
        0.254152094,
        0.258182853,
        0.262250658,
        0.266355605,
        0.270497791,
        0.274677312,
        0.278894263,
        0.283148740,
        0.287440838,
        0.291770650,
        0.296138271,
        0.300543794,
        0.304987314,
        0.309468923,
        0.313988713,
        0.318546778,
        0.323143209,
        0.327778098,
        0.332451536,
        0.337163615,
        0.341914425,
        0.346704056,
        0.351532600,
        0.356400144,
        0.361306780,
        0.366252596,
        0.371237680,
        0.376262123,
        0.381326011,
        0.386429434,
        0.391572478,
        0.396755231,
        0.401977780,
        0.407240212,
        0.412542613,
        0.417885071,
        0.423267670,
        0.428690497,
        0.434153636,
        0.439657174,
        0.445201195,
        0.450785783,
        0.456411023,
        0.462077000,
        0.467783796,
        0.473531496,
        0.479320183,
        0.485149940,
        0.491020850,
        0.496932995,
        0.502886458,
        0.508881321,
        0.514917665,
        0.520995573,
        0.527115126,
        0.533276404,
        0.539479489,
        0.545724461,
        0.552011402,
        0.558340390,
        0.564711506,
        0.571124829,
        0.577580440,
        0.584078418,
        0.590618841,
        0.597201788,
        0.603827339,
        0.610495571,
        0.617206562,
        0.623960392,
        0.630757136,
        0.637596874,
        0.644479682,
        0.651405637,
        0.658374817,
        0.665387298,
        0.672443157,
        0.679542470,
        0.686685312,
        0.693871761,
        0.701101892,
        0.708375780,
        0.715693501,
        0.723055129,
        0.730460740,
        0.737910409,
        0.745404210,
        0.752942217,
        0.760524505,
        0.768151147,
        0.775822218,
        0.783537792,
        0.791297940,
        0.799102738,
        0.806952258,
        0.814846572,
        0.822785754,
        0.830769877,
        0.838799012,
        0.846873232,
        0.854992608,
        0.863157213,
        0.871367119,
        0.879622397,
        0.887923118,
        0.896269353,
        0.904661174,
        0.913098652,
        0.921581856,
        0.930110858,
        0.938685728,
        0.947306537,
        0.955973353,
        0.964686248,
        0.973445290,
        0.982250550,
        0.991102097,
        1.000000000,
    ];
}
